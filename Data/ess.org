#+beginsrc emacs-lisp :exports code

1 ESS

1.1 Various ESS behavior

Stop screwing up my comments!!!

(defun my-ess-settings ()
  (setq ess-indent-with-fancy-comments nil))
(add-hook 'ess-mode-hook #'my-ess-settings)
1.2 R (with ESS)

ESS (Emacs Speaks Statistics) is a great project and makes Emacs speak with R.

(use-package ess-site
  :ensure ess
  :pin melpa-stable
  :diminish eldoc-mode
  :defer 2
  :bind
  (:map ess-mode-map
        ("C-a" . crux-move-beginning-of-line)
        ("M-=" . ess-insert-S-assign)
        ("_"   . self-insert-command)
        ("M-p" . my/add-pipe)
        ("M-n" . my/add-in)
        ("M-P" . my/add-two-way-pipe)
        ("C-|" . my/ess-eval-pipe-through-line)
        :map inferior-ess-mode-map
        ("M-=" . ess-insert-S-assign)
        ("_"   . self-insert-command))
  :config
  (setq inferior-R-args "--no-restore-data")
  (setq ess-nuke-trailing-whitespace-p t)
  (add-hook 'ess-mode-hook
            (lambda ()
              (ess-set-style 'RStudio)))
  (setq ess-eval-visibly 'nowait) ; don't hog Emacs
  (setq ess-ask-for-ess-directory nil) ; don't ask for dir when starting a process
  (setq ess-eldoc-show-on-symbol t) ; show eldoc on symbol instead of only inside of parens
  (setq ess-use-ido nil) ; rely on helm instead of ido
  (setq ess-pdf-viewer-pref "emacsclient")
  (defun my/add-pipe ()
    "Adds a pipe operato
        r %>% with one space to the left and then
            starts a newline with proper indentation"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (ess-newline-and-indent))
  (defun my/add-in ()
    "Adds an %in% "
    (interactive)
    (just-one-space 1)
    (insert "%in%")
    (just-one-space 1))
  (defun my/add-two-way-pipe ()
    "Adds a two way pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%<>%")
    (ess-newline-and-indent))
  ;; I sometimes want to evaluate just part of a piped sequence. The
  ;; following lets me do so without needing to insert blank lines or
  ;; something:
  (defun my/ess-beginning-of-pipe-or-end-of-line ()
    "Find point position of end of line or beginning of pipe %>%"
    (if (search-forward "%>%" (line-end-position) t)
        (let ((pos (progn
                     (beginning-of-line)
                     (search-forward "%>%" (line-end-position))
                     (backward-char 3)
                     (point))))
          (goto-char pos))
      (end-of-line)))

  (defun my/ess-eval-pipe-through-line (vis)
    "Like `ess-eval-paragraph' but only evaluates up to the pipe on this line.

            If no pipe, evaluate paragraph through the end of current line.

            Prefix arg VIS toggles visibility of ess-code as for `ess-eval-region'."
    (interactive "P")
    (save-excursion
      (let ((end (progn
                   (my/ess-beginning-of-pipe-or-end-of-line)
                   (point)))
            (beg (progn (backward-paragraph)
                        (ess-skip-blanks-forward 'multiline)
                        (point))))
        (ess-eval-region beg end vis)))))
1.3 Stata

Here Iâ€™ll setup stata to run within ess. Stata is stupid, but I have to use it sometimes.

(require 'ess-stata-mode)
(if (eq system-type 'gnu/linux)
    (setq inferior-STA-program-name "~/.config/stata14/stata-mp")    
  (setq inferior-STA-program-name "/Applications/Stata/StataMP.app/Contents/MacOS/stata-mp"))
1.4 Python

The package is called python, the mode is python-mode:

(use-package python
  :mode ("\\.py\\'". python-mode)
  :interpreter "python3")
(if (eq system-type 'darwin)
  (setq python-shell-interpreter "/usr/local/bin/python3") 
 (setq python-shell-interpreter "/bin/python3.6"))
(setq py-shell-name "python3")
Elpy is a ton of customizations for python. Load it up:

(use-package elpy
  :pin melpa-stable
  :config
  (elpy-enable)
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)))
I hate ipython/jupyter, but I come across it enough I should probably have it setup

(use-package ein)
(setq ein:use-auto-complete t)
(setq ein:jupyter-default-server-command "/usr/local/bin/jupyter")
(setq ein:jupyter-server-args (list "--no-browser"))
I have an issue involving completion that always throws a warning, this is supposed to fix that:

(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
1.5 Stan

(use-package stan-mode
  ;; stan is a language to write Bayesian models in
  :defer t
  :mode ("\\.stan\\'" . stan-mode))
#+endsrc